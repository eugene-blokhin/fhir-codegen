@page "/export/package"

@using FhirCodeGenBlazor.Models;
@using FhirCodeGenBlazor.Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Health.Fhir.CodeGenCommon.Models;
@using Microsoft.Health.Fhir.SpecManager.Language
@using Microsoft.Health.Fhir.SpecManager.Manager
@inject NavigationManager NavigationManager
@inject ISpecManagerWebService SpecService
@inject ISpecExporterWebService ExportService
@inject ProtectedLocalStorage BrowserStore
@implements IDisposable

@if ((string.IsNullOrEmpty(directive)) || (info == null))
{
    <PageTitle>FHIR Package Exporter</PageTitle>
    <p><em>This page requires a package name and version, please select...</em></p>
}
else if (info.ArtifactRecordsByClass.Any())
{
    <PageTitle>@directive</PageTitle>

    <ul>
        <li>
            Package Details<button class="btn" type="button" @onclick="() => showPackageDetails = !showPackageDetails"><span class="@GetCaretClass(showPackageDetails)"></span></button>

            @if (showPackageDetails == true)
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr class="row justify-content-start">
                            <th class="col-2">Property</th>
                            <th class="col-4">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="row justify-content-start">
                            <td class="col-2">Package Name</td>
                            <td class="col-4">@info.PackageName</td>
                        </tr>
                        <tr class="row justify-content-start">
                            <td class="col-2">Version</td>
                            <td class="col-4">@info.VersionString</td>
                        </tr>
                        <tr class="row justify-content-start">
                            <td class="col-2">FHIR Release</td>
                            <td class="col-4">@info.FhirSequence</td>
                        </tr>

                        @if (info.PackageDetails != null)
                        {
                            @if (info.PackageDetails.FhirVersions != null)
                            {
                                <tr class="row justify-content-start">
                                    <td class="col-2">FHIR Versions</td>
                                    <td class="col-4">@string.Join(", ", info.PackageDetails.FhirVersions)</td>
                                </tr>
                            }

                            @if (info.PackageDetails.Dependencies != null)
                            {
                                <tr class="row justify-content-start">
                                    <td class="col-2">Dependencies</td>
                                    <td class="col-4">@string.Join(", ", info.PackageDetails.Dependencies.Select(kvp => $"{kvp.Key}#{kvp.Value}"))</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </li>

        <li>
            Package Contents<button class="btn" type="button" @onclick="() => showPackageContents = !showPackageContents"><span class="@GetCaretClass(showPackageContents)"></span></button>
            @if (showPackageContents == true)
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr class="row justify-content-start">
                            <th class="col-2">Artifact Type</th>
                            <th class="col-1">Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (FhirArtifactClassEnum classEnum in info.ArtifactRecordsByClass.Keys.OrderBy(e => e.ToString()))
                        {
                            @if (!@info.ArtifactRecordsByClass[classEnum].Any())
                            {
                                continue;
                            }

                            <tr class="row justify-content-start">
                                <td class="col-2">@classEnum.ToString()</td>
                                <td class="col-1">@info.ArtifactRecordsByClass[classEnum].Count()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </li>

        <li>
            Export Configuration<button class="btn" type="button" @onclick="() => showLanguageDetails = !showLanguageDetails"><span class="@GetCaretClass(showLanguageDetails)"></span></button>

            @if (showLanguageDetails == true)
            {
                <select class="form-select" aria-label="Select Language" @bind="selectedLanguage">
                    <option selected value="">Select a language</option>
                    @foreach (string name in ExportService.GetExportLanguages().Keys)
                    {
                        <option value="@name">@name</option>
                    }
                </select>

                @if ((language != null) && (exporterOptions != null))
                {
                    <p class="fw-bold mt-2">Optional Artifact Types to Export:</p>
                    @foreach (ExporterOptions.FhirExportClassType optionalExportType in language.OptionalExportClassTypes)
                    {
                        <button type="button"
                            class="@GetButtonClass(optionalExportType)"
                            @onclick="() => ToggleOptional(optionalExportType)">
                            @optionalExportType
                        </button>
                    }

                    <p class="fw-bold mt-2">Export Options:</p>
                    <div class="row g-3 align-items-center mb-2">
                        <div class="col-1 text-end">
                            <label for="exportDirectoryPath" class="form-label">Export Path</label>
                        </div>
                        <div class="col-2">
                            <input type="text" id="exportDirectoryPath" class="form-control" @bind="exportDirectoryPath">
                        </div>
                        <div class="col-auto">
                            <span class="form-text">Server-based path to write export output</span>
                        </div>
                    </div>

                    <div class="row g-3 align-items-center mb-2">
                        <div class="col-1 text-end">
                            <label for="extensionSupportLevel" class="form-label">Extension Support Level</label>
                        </div>
                        <div class="col-2">
                            <select class="form-select" aria-label="Extension Support Level" @bind="extensionSupport">
                                @foreach (ExporterOptions.ExtensionSupportLevel value in Enum.GetValues(typeof(ExporterOptions.ExtensionSupportLevel)))
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        </div>
                        <div class="col-auto">
                            <span class="form-text">If supported by this language, where extensions should be included.</span>
                        </div>
                    </div>

                    @if ((language.LanguageOptions != null) && (language.LanguageOptions.Any()))
                    {
                        <div class="row g-3 mb-2">
                            <div class="col-1 text-end">
                                <label for="switchIncludeExperimental" class="form-label">Draft/Expiermental</label>
                            </div>
                            <div class="col-2 form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="switchIncludeExperimental" @bind="includeExperimental" />
                            </div>
                            <div class="col-auto">
                                <span class="form-text">If export should include draft and experimental artifacts.</span>
                            </div>
                        </div>

                        @foreach ((string option, string description) in language.LanguageOptions)
                        {
                            <div class="row g-3 align-items-center mb-2">
                                <div class="col-1 text-end">
                                    <label for="@GetIdForLanguageOption(option)" class="form-label">@option</label>
                                </div>
                                <div class="col-2">
                                    <input type="text" id="@GetIdForLanguageOption(option)" class="form-control" @bind="exporterOptions.LanguageOptions[option]">
                                </div>
                                <div class="col-auto">
                                    <span class="form-text">@description</span>
                                </div>
                            </div>
                        }
                    }
                }
            }
        </li>
    </ul>

    <div class="row g-3 align-items-center mb-2">
        <div class="col-1 text-center">
            <button class="@GetExportButtonClass()" type="button" @onclick="() => StartExport()">Start</button>
        </div>
        @if (exportInProgress)
        {
            <div class="col-1"><span class="spinner-border align-content-center"></span></div>
        }
        else if (!string.IsNullOrEmpty(uiMessage))
        {
            <div class="col-3 fw-bold text-danger">@uiMessage</div>
        }
    </div>
}
else
{
    <PageTitle>@directive</PageTitle>
    <p><em>This package contains no supported artifacts.</em></p>
}

@code {
    /// <summary>Gets or sets the navigation tracker.</summary>
    [CascadingParameter]
    public INavTracker? NavTracker { get; set; } = null;

    /// <summary>Gets or sets the package name.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "packageName")]
    public string PackageName { get; set; } = "";

    /// <summary>Gets or sets the package version.</summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = "version")]
    public string Version { get; set; } = "";

    /// <summary>The directive.</summary>
    private string directive = string.Empty;

    /// <summary>Gets or sets the information.</summary>
    private FhirVersionInfo? info { get; set; } = null;

    /// <summary>Gets or sets the language.</summary>
    private ILanguage? language { get; set; } = null;

    /// <summary>Gets or sets a value indicating whether the package details is shown.</summary>
    private bool showPackageDetails { get; set; } = true;

    /// <summary>Gets or sets a value indicating whether the package contents is shown.</summary>
    private bool showPackageContents { get; set; } = false;

    /// <summary>Gets or sets a value indicating whether the language details is shown.</summary>
    private bool showLanguageDetails { get; set; } = true;

    /// <summary>Gets or sets the full pathname of the export directory file.</summary>
    private string exportDirectoryPath { get; set; } = string.Empty;

    /// <summary>The selected language.</summary>
    private string _selectedLanguage = string.Empty;

    /// <summary>Gets or sets the selected language.</summary>
    private string selectedLanguage
    {
        get
        {
            return _selectedLanguage;
        }
        set
        {
            _selectedLanguage = value;
            InvokeAsync(() => UpdateLanguage(value));
        }
    }

    /// <summary>Options for controlling the exporter.</summary>
    private ExporterOptions? exporterOptions = null;

    /// <summary>The extension support.</summary>
    private ExporterOptions.ExtensionSupportLevel extensionSupport = ExporterOptions.ExtensionSupportLevel.NonPrimitive;

    /// <summary>
    /// Gets or sets a value indicating whether the experimental should be included.
    /// </summary>
    private bool includeExperimental { get; set; } = true;

    /// <summary>
    /// Gets or sets a value indicating whether the in progress should be exported.
    /// </summary>
    private bool exportInProgress { get; set; } = false;

    /// <summary>Gets or sets the message.</summary>
    private string uiMessage { get; set; } = string.Empty;

    /// <summary>Executes the initialized asynchronous action.</summary>
    /// <returns>An asynchronous result.</returns>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        directive = PackageName + "#" + Version;
        if (SpecService.ContainsKey(directive))
        {
            info = SpecService[directive];
        }

        NavTracker?.NotifyNav(directive, $"export/package?packageName={PackageName}&version={Version}", 1);
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    /// <summary>Executes the after render asynchronous action.</summary>
    /// <param name="firstRender">True to first render.</param>
    /// <returns>An asynchronous result.</returns>
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InvokeAsync(TryUpdateLanguageAsync);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>Try update language asynchronous.</summary>
    /// <returns>An asynchronous result that yields the try update language.</returns>
    async Task<bool> TryUpdateLanguageAsync()
    {
        var readResult = await BrowserStore.GetAsync<string>("last_export_language");
        if (readResult.Success)
        {
            selectedLanguage = readResult.Value ?? string.Empty;
            //UpdateLanguage(readResult.Value ?? string.Empty);
        }

        return true;
    }

    /// <summary>Starts an export.</summary>
    void StartExport()
    {
        if (exportInProgress)
        {
            return;
        }

        if (info == null)
        {
            uiMessage = "*** Failed to load the Package! ***";
            return;
        }

        if (exporterOptions == null)
        {
            uiMessage = "*** Cannot Export without configuration! ***";
            return;
        }

        if (language == null)
        {
            uiMessage = "*** An export language is required! ***";
            return;
        }

        if (string.IsNullOrEmpty(exportDirectoryPath))
        {
            uiMessage = "*** An export path is required! ***";
            return;
        }

        BrowserStore.SetAsync("last_export_language", exporterOptions.LanguageName);
        BrowserStore.SetAsync($"path_{directive}_{exporterOptions.LanguageName}", exportDirectoryPath);

        if (exporterOptions.LanguageOptions != null)
        {
            foreach ((string option, string value) in exporterOptions.LanguageOptions)
            {
                BrowserStore.SetAsync($"{directive}_{exporterOptions.LanguageName}_{option}", value);
            }
        }

        ExporterOptions options = new(
            exporterOptions.LanguageName,
            exporterOptions.ExportList,
            exporterOptions.OptionalClassTypesToExport,
            extensionSupport,
            exporterOptions.ExtensionUrls,
            exporterOptions.ExtensionElementPaths,
            exporterOptions.LanguageOptions,
            exporterOptions.ServerUrl,
            includeExperimental,
            exporterOptions.LanguageInputDir);

        uiMessage = string.Empty;

        exportInProgress = true;

        Task exportTask = ExportService.RequestExport(
            info,
            language,
            options,
            exportDirectoryPath);

        exportTask.ContinueWith(at => ExportCompleteHandler(at));
        exportTask.Start();
    }

    /// <summary>Handler, called when the export complete.</summary>
    /// <param name="exportTask">The export task.</param>
    void ExportCompleteHandler(Task exportTask)
    {
        if (exportTask.IsCompletedSuccessfully)
        {
            uiMessage = $"Export complete: {DateTime.Now.ToString()}";
            exportInProgress = false;
            InvokeAsync(() => StateHasChanged());
            return;
        }

        uiMessage = "*** Export failed! ***";
        exportInProgress = false;
        InvokeAsync(() => StateHasChanged());
    }


    /// <summary>Gets identifier for language option.</summary>
    /// <param name="option">The option.</param>
    /// <returns>The identifier for language option.</returns>
    string GetIdForLanguageOption(string option)
    {
        return "input_" + option;
    }

    /// <summary>Gets export button class.</summary>
    /// <returns>The export button class.</returns>
    string GetExportButtonClass()
    {
        return exportInProgress ? "btn btn-dark disabled" : "btn btn-primary";
    }

    /// <summary>Gets caret class.</summary>
    /// <param name="shown">True to shown.</param>
    /// <returns>The caret class.</returns>
    string GetCaretClass(bool shown)
    {
        return shown ? "oi oi-caret-bottom" : "oi oi-caret-top";
    }

    /// <summary>Updates the language described by name.</summary>
    /// <param name="name">The name.</param>
    private async void UpdateLanguage(string name)
    {
        if (string.IsNullOrEmpty(name))
        {
            exporterOptions = null;
            language = null;
            return;
        }

        if (exporterOptions?.LanguageName == name)
        {
            return;
        }

        //language = null;
        //languageOptions.Clear();

        if (ExportService.TryGetExportLanguage(name, out ILanguage? iLang) &&
            (iLang != null))
        {
            ProtectedBrowserStorageResult<string> readResult = await
                BrowserStore.GetAsync<string>($"path_{directive}_{iLang.LanguageName}");
            if (readResult.Success)
            {
                exportDirectoryPath = readResult.Value ?? exportDirectoryPath;
            }

            language = iLang;
            exporterOptions = new(
                name,
                exporterOptions?.ExportList,
                null,
                exporterOptions?.ExtensionSupport ?? ExporterOptions.ExtensionSupportLevel.NonPrimitive,
                exporterOptions?.ExtensionUrls,
                exporterOptions?.ExtensionElementPaths,
                null,
                exporterOptions?.ServerUrl,
                exporterOptions?.IncludeExperimental ?? true,
                exporterOptions?.LanguageInputDir);

            foreach (string option in iLang.LanguageOptions.Keys)
            {
                ProtectedBrowserStorageResult<string> optReadResult = await
                    BrowserStore.GetAsync<string>($"{directive}_{iLang.LanguageName}_{option}");

                exporterOptions.LanguageOptions.Add(option, optReadResult.Value ?? string.Empty);
            }

            foreach (ExporterOptions.FhirExportClassType optionalExportType in language.OptionalExportClassTypes)
            {
                exporterOptions.OptionalClassTypesToExport.Add(optionalExportType);
            }
        }
        else
        {
            language = null;
            exporterOptions = null;
        }

        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>Gets button class.</summary>
    /// <param name="ct">The ct.</param>
    /// <returns>The button class.</returns>
    private string GetButtonClass(ExporterOptions.FhirExportClassType ct)
    {
        if (exporterOptions?.OptionalClassTypesToExport.Contains(ct) == true)
        {
            return "btn btn-primary me-2 mb-2";
        }

        return "btn btn-outline-primary me-2 mb-2";
    }

    /// <summary>Toggle optional.</summary>
    /// <param name="ct">The ct.</param>
    private void ToggleOptional(ExporterOptions.FhirExportClassType ct)
    {
        if (exporterOptions == null)
        {
            return;
        }

        if (exporterOptions.OptionalClassTypesToExport.Contains(ct) == true)
        {
            exporterOptions.OptionalClassTypesToExport.Remove(ct);
        }
        else
        {
            exporterOptions.OptionalClassTypesToExport.Add(ct);
        }
    }

    /// <summary>
    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    /// resources.
    /// </summary>
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    /// <summary>Handles the location changed.</summary>
    /// <param name="sender">The sender.</param>
    /// <param name="e">     Location changed event information.</param>
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.ToLowerInvariant().Contains("/view/package"))
        {
            directive = PackageName + "#" + Version;
            if (SpecService.ContainsKey(directive))
            {
                info = SpecService[directive];
            }
            else
            {
                info = null;
            }

            NavTracker?.NotifyNav(directive, $"view/package?packageName={PackageName}&version={Version}", 1);

            InvokeAsync(() => StateHasChanged());
        }
    }
}
